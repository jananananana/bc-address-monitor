{"version":3,"sources":["components/Ledger.js","services/ParseMessage.js","App.js","serviceWorker.js","index.js"],"names":["Ledger","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFormSubmit","bind","assertThisInitialized","e","preventDefault","refs","addressInput","value","actions","send","JSON","stringify","op","addr","i","messages","map","message","react_default","a","createElement","key","className","action","onSubmit","ref","id","type","htmlFor","Component","ParseMessage","parseResponse","responseToParse","parse","extractTransactionInfo","response","console","log","App","sock","WebSocket","onopen","self","onmessage","data","transactions","setState","concat","toConsumableArray","state","onclose","components_Ledger","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QA6CeA,qBAzCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,iBAAmBP,EAAKO,iBAAiBC,KAAtBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFPA,gFAKFU,GAEfA,EAAEC,iBACSR,KAAKS,KAAKC,aAAaC,MAElCX,KAAKJ,MAAMgB,QAAQC,KAAKC,KAAKC,UAAU,CAACC,GAAK,WAAYC,KAAO,8CAKhE,IAAIC,EAAI,EACNC,EAAWnB,KAAKJ,MAAMuB,SAASC,IAAI,SAAAC,GACjC,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKP,KAAMG,KAG1B,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,QAAMG,OAAO,qDACbL,EAAAC,EAAAC,cAAA,QAAMI,SAAU5B,KAAKI,kBACnBkB,EAAAC,EAAAC,cAAA,SAAOK,IAAI,eAAeC,GAAG,gBAAgBC,KAAK,SAClDT,EAAAC,EAAAC,cAAA,SAAOQ,QAAQ,iBAAf,mBACAV,EAAAC,EAAAC,cAAA,UAAQO,KAAK,UAAb,oBAEFT,EAAAC,EAAAC,cAAA,UACGL,WA9BUc,cCWNC,EAdM,CAEjBC,cAAe,SAASC,GACpB,OAAOtB,KAAKuB,MAAMD,IAGtBE,uBAAwB,SAASC,GAE7B,OADAC,QAAQC,IAAIzC,MACLA,KAAKmC,cAAcI,KC2CnBG,cA5Cb,SAAAA,EAAY9C,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GACjB7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KAAMJ,IAGN,IAAI+C,EAAO,IAAIC,UAAU,gCAEzBD,EAAKE,OAAS,WACZL,QAAQC,IAAI,SAGd,IAAIK,EAAIhD,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,IAVS,OAYjB8C,EAAKI,UAAY,SAASxC,GACxBiC,QAAQC,IAAI,UAAWlC,EAAEyC,MAEzB,IAAIC,EAAef,EAAaI,uBAAuB/B,EAAEyC,MAEzDF,EAAKI,SAAU,CAAE/B,SAAQ,GAAAgC,OAAArD,OAAAsD,EAAA,EAAAtD,CAAMgD,EAAKO,MAAMlC,UAAjB,CAA2B8B,OAKtDN,EAAKW,QAAU,WACbd,QAAQC,IAAI,UAId5C,EAAKwD,MAAQ,CACXzC,QAAS+B,EACTxB,SAAU,IA7BKtB,wEAkCjB,OACEyB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,eAEAF,EAAAC,EAAAC,cAAC+B,EAAYvD,KAAKqD,eAvCRpB,aCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8faf03f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Ledger extends Component {\n  constructor(props) {\n    super(props);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this); \n  }\n\n  handleFormSubmit(e) {\n    // sample address 1dice8EMZmqKvrGE4Qc9bUFf9PX3xaYDp\n    e.preventDefault();\n    let text = this.refs.addressInput.value;\n    // TODO add address validation\n    this.props.actions.send(JSON.stringify({\"op\":\"addr_sub\", \"addr\":\"#{text}\"}));\n  } \n\n  render() {\n\n    let i = 0,\n      messages = this.props.messages.map(message => {\n        return <li key={i++}>{message}</li>\n      });\n\n    return (\n      <div className=\"c-ledger\">\n        <form action=\"https://blockchain.info/rawaddr/$bitcoin_address\"></form>\n        <form onSubmit={this.handleFormSubmit}>\n          <input ref=\"addressInput\" id=\"address-input\" type=\"text\"/>\n          <label htmlFor=\"address-input\">Bitcoin Address</label>\n          <button type=\"submit\">Look Up Address</button>\n        </form>\n        <ul>\n          {messages}\n        </ul>\n      </div>\n     );\n  }\n}\n\nLedger.propTypes = {\n  actions: PropTypes.object,\n  messages: PropTypes.array\n};\n\nexport default Ledger;\n","const ParseMessage = {\n\n    parseResponse: function(responseToParse) {\n        return JSON.parse(responseToParse);\n    },\n\n    extractTransactionInfo: function(response) {\n        console.log(this);\n        return this.parseResponse(response);\n    }\n\n\n};\n\nexport default ParseMessage;\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Ledger from './components/Ledger';\nimport ParseMessage from \"./services/ParseMessage.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Create a new socket connection with relative URL\n    let sock = new WebSocket('wss://ws.blockchain.info/inv');\n\n    sock.onopen = function() {\n      console.log('open');\n    };\n\n    let self = this;\n\n    sock.onmessage = function(e) {\n      console.log('message', e.data);\n      // messages from server, store in state\n      let transactions = ParseMessage.extractTransactionInfo(e.data);\n\n      self.setState( { messages: [...self.state.messages, transactions]});\n\n\n    };\n\n    sock.onclose = function() {\n      console.log('close');\n    };\n\n    // Save the messages from the server in messages, and then used to render\n    this.state = {\n      actions: sock,\n      messages: []\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n        </header>\n        <Ledger {... this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}